// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider      = "prisma-client-js"
    output        = "../src/.prisma/client"
    binaryTargets = ["native", "debian-openssl-1.1.x"] // https://www.prisma.io/docs/orm/reference/prisma-schema-reference#binarytargets-options
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")

    // direct url is useful when the database url is pointing to a connection pool which can restrict migration actions.
    directUrl = env("DIRECT_URL")
}

// generator dbml {
//     provider = "prisma-dbml-generator"
//     output   = "../documents/"
// }

// generator erd {
//     provider = "prisma-erd-generator"
//     theme    = "default"
//     output   = "../documents/schema.svg"
//     // erdDebug = true
//     mmdcPath = "node_modules/.bin"
// }

enum UserRole {
    STANDARD_USER
    ADMINISTRATOR
}

enum NotificationFrequency {
    DISABLED
    REALTIME
    HOURLY // 
    DAILYEVE // 5pm
    DAILYMORN // 9am
    WEEKLY // Monday morning?
}

model User {
    id                    String                @id @default(uuid())
    externalOid           String?
    loginEmail            String                @unique
    firstName             String                @db.VarChar(50)
    lastName              String                @db.VarChar(50)
    isSuperAdmin          Boolean?              @default(false)
    roles                 UserRole[]            @default([STANDARD_USER]) // Global roles on App level
    avatarUrl             String                @default("/assets/defaultAvatar.png")
    thumbnailPhoto        Int[]                 @default([])
    timeZoneOffSet        String                @default("-780")
    timeZone              String                @default("Pacific/Auckland")
    notificationFrequency NotificationFrequency @default(REALTIME)
    // timestamps
    createdAt             DateTime              @default(now())
    updatedAt             DateTime              @updatedAt
    // relationships
    SignInLogs            SignInLog[]
    UserActivityLogs      UserActivityLog[]
    UserNotifications     UserNotification[]
    MemberOfBusinessUnits Member[]
}

enum NotificationStatus {
    NOTIFIED
    READ // past tense
}

model UserNotification {
    id                  Int                  @id @default(autoincrement())
    status              NotificationStatus[]
    message             String
    additionalAttribute Json?
    // timestamps
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    // relationships
    userId              String
    User                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SignInLog {
    id             Int      @id @default(autoincrement())
    userId         String
    signInDateTime DateTime
    // timestamps
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    // relationships
    User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserActivityLog {
    id                Int      @id @default(autoincrement())
    userId            String
    sessionIdentifier String? // any value that can be use to identify the session
    eventStartTime    DateTime
    eventEndTime      DateTime
    eventDuration     Int
    eventParam        String?
    eventUrl          String
    // timestamps
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    // relationships
    User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Business Unit

enum Feature {
    BASIC
    BASIC_REPORTING
}

enum BusinessUnitType {
    TEAM
    DEPARTMENT
    DIVISION
    COMPANY
}

model BusinessUnit {
    id                   String           @id @default(uuid())
    type                 BusinessUnitType @default(TEAM)
    name                 String
    description          String?
    features             Feature[]
    parentBusinessUnitId String?
    ParentBusinessUnit   BusinessUnit?    @relation("ParentBusinessUnit_ChildBusinessUnit", fields: [parentBusinessUnitId], references: [id], onDelete: Cascade)
    // timestamps
    createdAt            DateTime         @default(now())
    updatedAt            DateTime         @updatedAt
    // relationships
    Members              Member[]
    ChildBusinessUnits   BusinessUnit[]   @relation("ParentBusinessUnit_ChildBusinessUnit")
}

enum MemberRole {
    ADMINISTRATOR
    STANDARD
}

model Member {
    id             Int          @id @default(autoincrement())
    roles          MemberRole[] @default([STANDARD]) // Business Unit scoped roles
    // timestamps
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    // relationships
    businessUnitId String
    BusinessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id], onDelete: Cascade)
    userId         String
    User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}
