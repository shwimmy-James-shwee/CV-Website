generator client {
    provider      = "prisma-client-js"
    output        = "../node_modules/.prisma/client"
    binaryTargets = ["native", "debian-openssl-1.1.x"] // https://www.prisma.io/docs/orm/reference/prisma-schema-reference#binarytargets-options
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")

    // direct url is useful when the database url is pointing to a connection pool which can restrict migration actions.
    directUrl = env("DIRECT_URL")
}

// generator dbml {
//     provider = "prisma-dbml-generator"
//     output   = "../../documents/"
// }

// generator erd {
//     provider = "prisma-erd-generator"
//     theme    = "default"
//     output   = "../../documents/schema.svg"
//     // erdDebug = true
//     mmdcPath = "node_modules/.bin"
// }

model User {
    id           String      @id @default(uuid())
    loginEmail   String      @unique
    firstName    String      @db.VarChar(50)
    lastName     String      @db.VarChar(50)
    isSuperAdmin Boolean?    @default(false)
    avatarUrl    String      @default("/assets/defaultAvatar.png")
    // timestamps
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    // relationships
    SignInLogs   SignInLog[]
}

model ContactUsNotification {
    id                  Int      @id @default(autoincrement())
    title               String
    message             String
    submittedByEmail    String
    additionalAttribute Json?
    // timestamps
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
}

model SignInLog {
    id             Int      @id @default(autoincrement())
    userId         String
    signInDateTime DateTime
    // timestamps
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    // relationships
    User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
    id          String   @id @default(uuid())
    title       String
    description String // TODO change value to store HTML/MD
    highlighted Boolean  @default(false)
    dateStarted DateTime
    dateEnded   DateTime
    // timestamps
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    // relationships
    Images      Image[]
}

model Image {
    id              String   @id @default(uuid())
    imageUrl        String
    altText         String
    displaySequence Int?
    // timestamps
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    // relationships
    projectId       String
    Project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
