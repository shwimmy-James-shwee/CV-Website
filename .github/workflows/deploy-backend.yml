name: Deploy Backend API
on:
  push:
    branches: ['dev', 'qa', 'staging']
    paths:
      - 'apps/backend/**'
      - 'libs/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:
    inputs:
      name:
        type: choice
        description: which env to deploy the changes to
        options:
          - dev
          # - uat
          # - main
        default: dev
env:
  NODE_DOCKER_IMAGE: 'node:lts-slim'
jobs:
  build-base:
    name: Build Docker Base
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Branch name
        run: echo running on branch ${GITHUB_REF##*/} - ${{github.ref_name}} - ${{ github.event.inputs.name }}

      - uses: actions/cache@v4
        id: cache
        with:
          path: /tmp/nodeBase.tar
          key: ${{ runner.os }}-node-base-${{ hashFiles('**/apps/backend/dockerfiles/nodeBase.Dockerfile') }}

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Base not found, build from scratch"
          docker system prune -f -a
          docker ps -a
          docker image ls -a
          docker build -t node-base -f ./apps/backend/dockerfiles/nodeBase.Dockerfile .
          docker save --output /tmp/nodeBase.tar node-base

      - name: Upload Node Base Artifacts
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: node-base
          path: /tmp/nodeBase.tar
          retention-days: 1

  build:
    name: Build Docker
    needs: build-base
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Branch name
        run: echo running on branch ${GITHUB_REF##*/} - ${{github.ref_name}} - ${{ github.event.inputs.name }}

      - name: Download Node Base artifacts
        uses: actions/download-artifact@v4
        with:
          name: node-base
          path: /tmp

      - name: Load Node Base Image
        run: |
          docker image load --input /tmp/nodeBase.tar
          docker image ls -a

      - name: Add Commit Message to File
        run: |
          git log -4 --date=format-local:'%Y-%m-%d %H:%M:%S' >> ./apps/backend/git_commit_msg.txt
          command git --no-pager log -1 --format="%ai" >> ./apps/backend/git_commit_msg.txt
          echo ${{ github.run_id }} >> ./apps/backend/git_commit_msg.txt

      - name: Build And Push
        run: |

          # get use the dynamic base file from different env
          cp ./apps/backend/dockerfiles/node.Dockerfile ./apps/backend/dockerfiles/node.Dockerfile_og ;\
          sed -i "s|FROM $NODE_DOCKER_IMAGE|FROM node-base:latest|g" ./apps/backend/dockerfiles/node.Dockerfile
          cat ./apps/backend/dockerfiles/node.Dockerfile

          docker ps -a
          docker image ls -a

          docker build -t webappapi -f ./apps/backend/dockerfiles/node.Dockerfile .
          docker ps -a
          docker image ls
          docker container ls
          docker save --output /tmp/webappapi.tar webappapi

      - name: Upload API App Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: webappapi
          path: /tmp/webappapi.tar
          retention-days: 1

  deploy:
    name: Deploy Docker
    needs: build
    runs-on: opch
    environment: ${{ (contains(github.ref_type, 'tag') && 'prod') || github.ref_name }}
    env:
      AZURE_CONTAINER_REGISTRY_NAME: ${{ vars.PROJECT_NAME_ABBREVIATION }}acr${{ vars.ENV }}
      AZURE_CONTAINER_REGISTRY: ${{ vars.PROJECT_NAME_ABBREVIATION }}acr${{ vars.ENV }}.azurecr.io
    steps:
      - uses: actions/checkout@v3
      - name: Branch name
        run: echo running on branch ${GITHUB_REF##*/} - ${{github.ref_name}} - ${{ github.event.inputs.name }}

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download API App artifacts
        uses: actions/download-artifact@v4
        with:
          name: webappapi
          path: /tmp

      - name: Load And Push Image
        run: |
          docker image load --input /tmp/webappapi.tar

          docker tag webappapi $AZURE_CONTAINER_REGISTRY/webappapi:${{ github.run_id }}
          docker tag webappapi $AZURE_CONTAINER_REGISTRY/webappapi

          # publish image to acr
          docker push $AZURE_CONTAINER_REGISTRY/webappapi:${{ github.run_id }}
          docker push  $AZURE_CONTAINER_REGISTRY/webappapi

      - name: Deploy to Staging
        uses: azure/webapps-deploy@v2
        with:
          app-name: '${{ vars.PROJECT_NAME_ABBREVIATION }}-be-${{ vars.ENV }}'
          slot-name: ${{ vars.ENV == 'prod' && 'staging' || 'production' }}
          images: '${{ env.AZURE_CONTAINER_REGISTRY }}/webappapi:${{ github.run_id }}'
          # ${{ github.run_id }}

      - name: Remove old images/container
        id: remove
        if: success() || failure()
        continue-on-error: true
        run: |
          docker image rm webappapi
          rm -rf /tmp/*
