## Initialize IaC State Backend and Cores

# This GitHub Actions workflow is responsible for initializing the infrastructure-as-code (IaC) state backend and cores for a web application template. It supports deploying changes to different environments such as `dev`, `uat`, and `prod`.

#`environment`: Specifies the environment to deploy the changes to. It is a choice input with options `dev`, `uat`, and `prod`.
#`first`: Indicates whether this is the first time deploying the initialization. It is a boolean input and is required.

name: Initialize IaC State Backend and Cores
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: which environment to deploy the changes to
        options:
          - dev
          # - uat
          # - prod
      first:
        description: this is the first time deploy Initialize
        type: boolean
        required: true
        default: false

jobs:
  ManualApprove:
    environment:
      name: ${{ github.event.inputs.environment }}-approve
    runs-on: ubuntu-latest
    steps:
      - name: manual approve
        run: |
          echo "Manually approved"

  deploy:
    needs: ManualApprove
    name: Set up IaC States backend and Cores
    runs-on: opch
    environment: ${{ github.event.inputs.environment }} # this will decide the environment to run the job on and will use the variable and secrets defined in the github environment setting

    env:
      nodeModuleLocation: ${{ github.workspace }}/node_modules/
      PROJECT_NAME_ABBREVIATION: ${{ vars.PROJECT_NAME_ABBREVIATION }} # this is the abbreviation of the project name, should be repo level instead of environment level
      PRIVATE_ENDPOINT_SUBNET: ${{ vars.PRIVATE_ENDPOINT_SUBNET }}
      AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
      AZURE_RESOURCE_LOCATION: ${{ vars.AZURE_RESOURCE_LOCATION }}
      ENV: ${{ vars.ENV }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      AZURE_STORAGE_ACCOUNT: ${{ vars.PROJECT_NAME_ABBREVIATION }}codedeploy${{ vars.ENV }}
      PULUMI_CONFIG_PASSPHRASE: ${{ vars.PULUMI_CONFIG_PASSPHRASE }}

    steps:
      - name: Check PROJECT_NAME_ABBREVIATION
        run: |
          if [[ ! $PROJECT_NAME_ABBREVIATION =~ ^([a-zA-Z0-9]){1,8}$ ]]; then
            echo "Error: PROJECT_NAME_ABBREVIATION <$PROJECT_NAME_ABBREVIATION> does not match the required pattern ^([a-zA-Z0-9]){1,8}$"
            exit 1
          fi
      - uses: actions/checkout@v2
      - name: Branch name
        run: |
          echo running on branch ${GITHUB_REF##*/} - ${{github.ref_name}}
          rm -rf ~/.pulumi/*
          echo "-----------------------------------Test Env--------------------------------------------"
          echo $PROJECT_NAME_ABBREVIATION
          echo $PRIVATE_ENDPOINT_SUBNET
          echo $ENV
          echo $AZURE_CREDENTIALS
          echo $AZURE_RESOURCE_GROUP

      - name: Set up NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 21.1.0

      - name: Install npm dependencies and prep package.json
        shell: bash
        # if: steps.cache.outputs.cache-hit != 'true'
        run: |
          yarn install
          yarn global add ts-node
          # curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          curl -fsSL https://get.pulumi.com | sh -s -- --version 3.74.0
          # sudo apt install -y jq
          # sudo apt install -y docker docker-compose
          ls -l
          pwd
          yarn make:codedeploy
          cat ./package.json

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare environment variables}
        run: |
          # Parse Azure secret into env variables
          echo "ARM_CLIENT_ID=$( jq -r '.clientId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV;
          echo "ARM_CLIENT_SECRET=$( jq -r '.clientSecret' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV;
          echo "ARM_SUBSCRIPTION_ID=$( jq -r '.subscriptionId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV;
          echo "ARM_TENANT_ID=$( jq -r '.tenantId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV
        shell: bash

      - name: No Exisitng State Deploy
        if: ${{ github.event.inputs.first == 'true' }}
        # Note: We have to use absolute path instead of relative path to run pulumi command because of some config issues on OPCH-Runner.
        run: |
          /home/lnxadmin/.pulumi/bin/pulumi login --local
          /home/lnxadmin/.pulumi/bin/pulumi stack init ${{ vars.ENV }}
          /home/lnxadmin/.pulumi/bin/pulumi up --yes

      - name: Have Existing State Deploy
        if: ${{ github.event.inputs.first == 'false' }}
        # Note: We have to use absolute path instead of relative path to run pulumi command because of some config issues on OPCH-Runner.
        run: |
          cd codedeploy
          export AZURE_STORAGE_KEY=$(az storage account keys list -n $AZURE_STORAGE_ACCOUNT -g $AZURE_RESOURCE_GROUP -o tsv --query '[0].value')

          /home/lnxadmin/.pulumi/bin/pulumi login --local
          /home/lnxadmin/.pulumi/bin/pulumi stack init ${{ vars.ENV }}

          az storage blob download -f storage-states.json -n storage-states.json --container-name pulumistate --account-key $AZURE_STORAGE_KEY --account-name $AZURE_STORAGE_ACCOUNT --overwrite

          /home/lnxadmin/.pulumi/bin/pulumi stack import --file storage-states.json
          /home/lnxadmin/.pulumi/bin/pulumi refresh --yes
          /home/lnxadmin/.pulumi/bin/pulumi up --yes

      - name: Wait for CodeDeploy to be ready
        run: |
          for i in {1..70}; do
            echo ======================= Iteration: $i, Seconds waited: $((($i-1) * 10)) =======================

            result=$(nslookup $AZURE_STORAGE_ACCOUNT.blob.core.windows.net || true)
            if ! echo "$result" | grep -q "NXDOMAIN" && echo "$result" | grep -q "privatelink"; then
                echo "$result"
                break
            fi
            echo "$result"
            sleep 10
          done

      - name: Upload State
        run: |
          cd codedeploy

          export AZURE_STORAGE_KEY=$(az storage account keys list -n $AZURE_STORAGE_ACCOUNT -g $AZURE_RESOURCE_GROUP -o tsv --query '[0].value')
          /home/lnxadmin/.pulumi/bin/pulumi stack export --file storage-states.json
          echo "-----------------------------------Display State--------------------------------------------"
          cat storage-states.json
          echo "--------------------------------------------------------------------------------------------"
          az storage blob upload -f storage-states.json --container-name pulumistate --account-key "$AZURE_STORAGE_KEY" --account-name $AZURE_STORAGE_ACCOUNT --overwrite
